from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from . import add_words, delete_words, check_words, testing_mode
from .bot_state import BotState
from .constants import HELP_INFO


class NeutralState(BotState):
    def start_text(self):
        return "üòå –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        return self.start_text(), self.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/help", "–ö–æ–º–∞–Ω–¥—ã"):
            return HELP_INFO + '\n\n' + self.start_text(), self.get_keyboard()

        if command in ("/new", "–î–æ–±–∞–≤–∏—Ç—å"):
            new_state = add_words.NewWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/delete", "–£–¥–∞–ª–∏—Ç—å"):
            new_state = delete_words.DeleteWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/remind", "–ù–∞–ø–æ–º–Ω–∏—Ç—å"):
            new_state = check_words.Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/words", "–í—Å–µ —Å–ª–æ–≤–∞"):
            new_state = check_words.CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/test", "–¢–µ—Å—Ç"):
            new_state = testing_mode.StartTest(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('–ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–ö–æ–º–∞–Ω–¥—ã', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¢–µ—Å—Ç', color=VkKeyboardColor.PRIMARY)
        return keyboard


class Greeting(NeutralState):
    def start_text(self):
        return "–ü—Ä–∏–≤–µ—Ç!!! üòÄüñê\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —è –∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—Éüòâ"

    def handle_answer(self, text):

        command = self.handle_commands(text)
        if command:
            return command

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/help", "–ö–æ–º–∞–Ω–¥—ã"):
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return HELP_INFO + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        command = super().handle_commands(command)
        if command:
            return command

        return False
