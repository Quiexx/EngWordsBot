from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from . import neutral
from database_models import Words

from .bot_state import BotState
from .constants import WORDS_RE, CANCEL_REMIND, CANCEL_ALL_WORDS, SHOW_COUNT, MAX_SYMBOLS


class Remind(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word = text.strip()
        if WORDS_RE.fullmatch(word) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        found_word = Words.get(word=word)
        dictionary = self.user_state.dictionary
        word_id = str(found_word.id) if found_word else None
        if word_id not in dictionary:
            text_to_send = "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ.\n" \
                           "–ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /new"
        else:
            text_to_send = f'"{word}" - —ç—Ç–æ:\n'
            transl_indices = [int(w_id) for w_id in dictionary[word_id]]
            translations = [Words.get(id=w_id).word for w_id in transl_indices]

            for translation in translations:
                text_to_send += f"üü£ {translation}\n"

        new_state = neutral.NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return text_to_send + '\n\n' + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_REMIND + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


class CheckAllWords(BotState):
    def start_text(self):
        word_count = len(self.user_state.dictionary.keys())

        if word_count == 0:
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞\n" \
                   '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /new\n' \
                   '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"' \
                   + '\n\n' + new_state.start_text()

        self.user_state.buffer.update({"word_count": word_count})
        return f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {word_count}\n\n" \
               f'üü¢ /all (–∫–Ω–æ–ø–∫–∞ "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")\n\t–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ\n' \
               f'üü¢ /letter (–∫–Ω–æ–ø–∫–∞ "üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º")\n\t–Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –ø–µ—Ä–≤–æ–π(—ã–º) –±—É–∫–≤–µ(–∞–º)\n' \
               f'üü¢ /cancel (–∫–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")\n\t–æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤\n'

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        new_state = neutral.NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/all", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"):
            new_state = ShowAll(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/letter", "üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º"):
            self.user_state.buffer.clear()
            new_state = WriteToFind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        word_count = len(self.user_state.dictionary.keys())
        if word_count == 0:
            new_state = neutral.NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


class ShowAll(BotState):
    def start_text(self):
        word_count = self.user_state.buffer["word_count"]

        if "from_word_idx" in self.user_state.buffer.keys():
            from_idx = self.user_state.buffer["from_word_idx"]
        else:
            from_idx = 0
            self.user_state.buffer["from_word_idx"] = 0

        all_words, all_count = self.get_word_list(from_idx)

        if all_count == SHOW_COUNT and from_idx + SHOW_COUNT < word_count:
            text = f'–ï—â–µ —Å–ª–æ–≤: {word_count - from_idx - SHOW_COUNT}\n' \
                   f'–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ /more\n' \
                   f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑ —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ /cancel\n'
        else:
            text = "–≠—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞"
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return ''.join(all_words) + '\n\n' + text + "\n\n" + new_state.start_text()

        return ''.join(all_words) + '\n\n' + text

    def handle_answer(self, text):

        command = self.handle_commands(text)
        if command:
            return command

        new_state = ShowAll(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n\n" + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/more", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"):
            self.user_state.buffer["from_word_idx"] += SHOW_COUNT
            new_state = ShowAll(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        if "word_count" not in self.user_state.buffer:
            new_state = neutral.NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard

    def get_word_list(self, from_idx):
        all_words = ''
        count = 0
        word_ids = [int(w_id) for w_id in self.user_state.dictionary.keys()]
        to_idx = from_idx + SHOW_COUNT
        words = Words.select(lambda x: x.id in word_ids).order_by(Words.word)[from_idx: to_idx]
        for word in words:
            count += 1
            transl_ids = [int(w_id) for w_id in self.user_state.dictionary[str(word.id)]]
            translations = [Words.get(id=int(w_id)).word for w_id in transl_ids]
            all_words += f"{word.word} - {', '.join(translations)}\n"
        return all_words, count


class WriteToFind(BotState):
    def start_text(self):
        return "–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–ª–æ–≤–∞\n" \
               f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {MAX_SYMBOLS} —Å–∏–º–≤–æ–ª–æ–≤\n" \
               "–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        fragment = text.strip()

        if len(fragment) > MAX_SYMBOLS:
            return "–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º - 100\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–∫–æ—Ä–æ—á–µ\n\n" \
                   + self.start_text(), self.get_keyboard()

        indices = [int(w_id) for w_id in self.user_state.dictionary.keys()]
        words_selection = Words.select(lambda x: x.id in indices and fragment in x.word)
        selected_count = len(words_selection)

        if selected_count == 0:
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return "–ù–µ—Ç —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–∞–∫–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç\n\n" + new_state.start_text(), new_state.get_keyboard()

        self.user_state.buffer.update({"fragment": fragment})
        self.user_state.buffer.update({"idx_from": 0})
        self.user_state.buffer.update({"found_count": selected_count})

        new_state = FindWords(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


class FindWords(BotState):
    def start_text(self):
        idx_from = self.user_state.buffer["idx_from"]
        count = self.user_state.buffer["found_count"]

        all_words, all_count = self.get_word_list(idx_from)

        if all_count == SHOW_COUNT and idx_from + SHOW_COUNT < count:
            text = f'–ï—â–µ —Å–ª–æ–≤: {count - idx_from - SHOW_COUNT}\n' \
                   f'–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ /more\n' \
                   f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑ —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ /cancel\n'
        else:
            text = "–≠—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞"
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return ''.join(all_words) + '\n\n' + text + "\n\n" + new_state.start_text()

        return ''.join(all_words) + '\n\n' + text

    def handle_answer(self, text):

        command = self.handle_commands(text)
        if command:
            return command

        new_state = FindWords(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n\n" + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/more", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"):
            self.user_state.buffer["idx_from"] += SHOW_COUNT
            new_state = FindWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        if not self.user_state.buffer:
            new_state = neutral.NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard

    def get_word_list(self, idx_from):
        all_words = ''
        count = 0
        indices = [int(w_id) for w_id in self.user_state.dictionary.keys()]
        fragment = self.user_state.buffer["fragment"]
        words = Words.select(lambda x: x.id in indices and fragment in x.word).order_by(Words.word)[
                idx_from: idx_from + SHOW_COUNT]
        for word in words:
            count += 1
            transl_ids = [int(w_id) for w_id in self.user_state.dictionary[str(word.id)]]
            translations = [Words.get(id=int(w_id)).word for w_id in transl_ids]
            all_words += f"{word.word} - {', '.join(translations)}\n"
        return all_words, count
