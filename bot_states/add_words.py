from pony.orm import commit
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

from . import neutral, check_words
from .bot_state import BotState
from .constants import MAX_SYMBOLS, WORDS_RE, CANCEL_WORD_ADDING
from database_models import Words


class NewWord(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥\n" \
               f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {MAX_SYMBOLS} —Å–∏–º–≤–æ–ª–æ–≤\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        written_word = text.strip().lower()

        if len(written_word) > MAX_SYMBOLS:
            return "–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º - 100\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–∫–æ—Ä–æ—á–µ\n\n" \
                   + self.start_text(), self.get_keyboard()

        if WORDS_RE.fullmatch(written_word) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        self.user_state.buffer = {"word": written_word}

        new_state = NewWordTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = neutral.NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_WORD_ADDING + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/remind", "ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = check_words.Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/words", "üìî –í—Å–µ —Å–ª–æ–≤–∞"):
            self.user_state.buffer.clear()
            new_state = check_words.CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üìî –í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        return keyboard


class NewWordTranslation(NewWord):
    def start_text(self):
        word = self.user_state.buffer["word"]
        return f'–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "{word}"\n' \
               f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ {MAX_SYMBOLS} —Å–∏–º–≤–æ–ª–æ–≤\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word = self.user_state.buffer["word"]

        translation = text.strip().lower()

        if word == translation:
            return "–í—ã –≤–≤–µ–ª–∏ —Ç–æ –∂–µ —Å–∞–º–æ–µ\n\n" \
                   + self.start_text(), self.get_keyboard()

        if len(translation) > MAX_SYMBOLS:
            return "–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤. –ú–∞–∫—Å–∏–º—É–º - 100\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–∫–æ—Ä–æ—á–µ\n\n" \
                   + self.start_text(), self.get_keyboard()

        if WORDS_RE.fullmatch(translation) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        found_word = Words.get(word=word)
        found_translation = Words.get(word=translation)

        if found_word is None:
            found_word = Words(word=word, using_count=0)
            commit()

        if found_translation is None:
            found_translation = Words(word=translation, using_count=0)
            commit()

        word_id = str(found_word.id)
        translation_id = str(found_translation.id)

        dictionary = self.user_state.dictionary

        if word_id in dictionary:
            if translation_id in dictionary[word_id]:
                new_state = AddAnotherTranslation(self.user_state)
                self.user_state.bot_state_name = new_state.__class__.__name__
                return "–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥\n\n" + new_state.start_text(), new_state.get_keyboard()
            else:
                self.user_state.dictionary[word_id].append(translation_id)
        else:
            self.user_state.dictionary[word_id] = [translation_id]
            found_word.using_count += 1

        if translation_id in dictionary:
            self.user_state.dictionary[translation_id].append(word_id)
        else:
            self.user_state.dictionary[translation_id] = [word_id]
            found_translation.using_count += 1

        new_state = AddAnotherTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()


class AddAnotherTranslation(NewWord):
    def start_text(self):
        return "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞? (–¥–∞/–Ω–µ—Ç)"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        answer = text.strip().lower()
        if answer in ('–¥–∞', '—Ö–æ—á—É', '–¥–∞–≤–∞–π', 'yes'):
            new_state = NewWordTranslation(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        self.user_state.buffer.clear()
        new_state = neutral.NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üìî –í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        return keyboard
