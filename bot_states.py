from random import sample
import re

from pony.orm import commit
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from database_models import Words

HELP_INFO = "–Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "‚úç /new - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥\n" \
            "ü§î /remind - –í—Å–ø–æ–º–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.\n" \
            "üìî /words - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n" \
            "‚ùå /delete - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n" \
            "üìù /test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç. –í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ —è –±—É–¥—É –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –≤—ã " \
            "–¥–æ–±–∞–≤–∏–ª–∏, –ø–∏—Å–∞—Ç—å –µ–≥–æ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥.\n" \
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —è –≤–∞–º - apple, –∞ –≤—ã –º–Ω–µ - —è–±–ª–æ–∫–æ. –ò–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç."

TEST_EXIT_INFO = "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω"
EXISTING_TRANSLATION = "–¢–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å"
DELETION_TEXT = "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ"
CANCEL_WORD_ADDING = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"
CANCEL_REMIND = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
CANCEL_ALL_WORDS = "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω"
CANCEL_DELETE = "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
SHOW_COUNT = 15

WORDS_RE = re.compile('[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+')


class BotState:
    def __init__(self, user_state):
        self.user_state = user_state

    def handle_commands(self, text):
        return False

    def start_text(self):
        return "–≠—Ç–æ—Ç state –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"

    def handle_answer(self, text):
        return self.start_text(), self.get_keyboard()

    def get_keyboard(self):
        return None


# Neutral state

class NeutralState(BotState):
    def start_text(self):
        return "üòå –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        return self.start_text(), self.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/help", "–ö–æ–º–∞–Ω–¥—ã"):
            return HELP_INFO + '\n\n' + self.start_text(), self.get_keyboard()

        if command in ("/new", "–î–æ–±–∞–≤–∏—Ç—å"):
            new_state = NewWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/delete", "–£–¥–∞–ª–∏—Ç—å"):
            new_state = DeleteWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/remind", "–ù–∞–ø–æ–º–Ω–∏—Ç—å"):
            new_state = Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/words", "–í—Å–µ —Å–ª–æ–≤–∞"):
            new_state = CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/test", "–¢–µ—Å—Ç"):
            new_state = StartTest(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('–ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('–ö–æ–º–∞–Ω–¥—ã', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('–¢–µ—Å—Ç', color=VkKeyboardColor.PRIMARY)
        return keyboard


# Greeting state

class Greeting(NeutralState):
    def start_text(self):
        return "–ü—Ä–∏–≤–µ—Ç!!! üòÄüñê\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —è –∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—Éüòâ"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()


# Add new word

class NewWord(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        written_word = text.strip()

        if WORDS_RE.fullmatch(written_word) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        self.user_state.buffer = {"word": written_word}

        new_state = NewWordTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_WORD_ADDING + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/remind", "ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/words", "üìî –í—Å–µ —Å–ª–æ–≤–∞"):
            self.user_state.buffer.clear()
            new_state = CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üìî –í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        return keyboard


class NewWordTranslation(NewWord):
    def start_text(self):
        word = self.user_state.buffer["word"]
        return f'–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è "{word}"\n' \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word = self.user_state.buffer["word"]

        translation = text.strip()

        if WORDS_RE.fullmatch(translation) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        found_word = Words.get(word=word)
        found_translation = Words.get(word=translation)

        if found_word is None:
            found_word = Words(word=word, using_count=0)
            commit()

        if found_translation is None:
            found_translation = Words(word=translation, using_count=0)
            commit()

        word_id = str(found_word.id)
        translation_id = str(found_translation.id)

        dictionary = self.user_state.dictionary

        if word_id in dictionary:
            if translation_id in dictionary[word_id]:
                new_state = AddAnotherTranslation(self.user_state)
                self.user_state.bot_state_name = new_state.__class__.__name__
                return "–í—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥\n\n" + new_state.start_text(), new_state.get_keyboard()
            else:
                self.user_state.dictionary[word_id].append(translation_id)
        else:
            self.user_state.dictionary[word_id] = [translation_id]
            found_word.using_count += 1

        if translation_id in dictionary:
            self.user_state.dictionary[translation_id].append(word_id)
        else:
            self.user_state.dictionary[translation_id] = [word_id]
            found_translation.using_count += 1

        new_state = AddAnotherTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()


class AddAnotherTranslation(NewWord):
    def start_text(self):
        return "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞? (–¥–∞/–Ω–µ—Ç)"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        answer = text.strip().lower()
        if answer in ('–¥–∞', '—Ö–æ—á—É', '–¥–∞–≤–∞–π', 'yes'):
            new_state = NewWordTranslation(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        self.user_state.buffer.clear()
        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–î–∞', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–ù–µ—Ç', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üìî –í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        return keyboard


# Remind word's translation

class Remind(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word = text.strip()
        if WORDS_RE.fullmatch(word) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        found_word = Words.get(word=word)
        dictionary = self.user_state.dictionary
        word_id = str(found_word.id) if found_word else None
        if word_id not in dictionary:
            text_to_send = "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ.\n" \
                           "–ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /new"
        else:
            text_to_send = f'"{word}" - —ç—Ç–æ:\n'
            transl_idices = [int(id) for id in dictionary[word_id]]
            translations = [Words.get(id=id).word for id in transl_idices]

            for translation in translations:
                text_to_send += f"üü£ {translation}\n"

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return text_to_send + '\n\n' + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_REMIND + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


# Delete word

class DeleteWord(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        written_word = text.strip()

        if WORDS_RE.fullmatch(written_word) is None:
            return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n" \
                   "–í —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä –∏–ª–∏ —ç–º–æ–¥–∑–∏\n" \
                   "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã\n\n" \
                   + self.start_text(), self.get_keyboard()

        word = Words.get(word=written_word)
        word_id = str(word.id) if word else None
        if word_id not in self.user_state.dictionary:
            return "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ " \
                   "–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å /all\n\n" + self.start_text()

        transl_indices = self.user_state.dictionary[word_id]
        self.user_state.dictionary.pop(word_id)

        word.using_count -= 1
        if word.using_count == 0:
            Words.delete(word)

        for transl_id in transl_indices:
            self.user_state.dictionary[transl_id].remove(word_id)
            if not self.user_state.dictionary[transl_id]:
                self.user_state.dictionary.pop(transl_id)
                translation = Words.get(id=int(transl_id))
                translation.using_count -= 1
                if translation.using_count == 0:
                    Words.delete(translation)

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return DELETION_TEXT + '\n' + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_DELETE + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/remind", "ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å"):
            new_state = Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/all", "üìî –í—Å–µ —Å–ª–æ–≤–∞"):
            new_state = CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()
        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        keyboard.add_line()
        keyboard.add_button('ü§î –ù–∞–ø–æ–º–Ω–∏—Ç—å', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üìî –í—Å–µ —Å–ª–æ–≤–∞', color=VkKeyboardColor.SECONDARY)
        return keyboard


# Check all added words

class CheckAllWords(BotState):
    def start_text(self):
        word_count = len(self.user_state.dictionary.keys())

        if word_count == 0:
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤–∞\n" \
                   '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /new\n' \
                   '–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å"' \
                   + '\n\n' + new_state.start_text()

        self.user_state.buffer.update({"word_count": word_count})
        return f"–í—Å–µ–≥–æ —Å–ª–æ–≤: {word_count}\n\n" \
               f'üü¢ /all (–∫–Ω–æ–ø–∫–∞ "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")\n\t–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ\n' \
               f'üü¢ /letter (–∫–Ω–æ–ø–∫–∞ "üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º")\n\t–Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ –ø–æ –ø–µ—Ä–≤–æ–π(—ã–º) –±—É–∫–≤–µ(–∞–º)\n' \
               f'üü¢ /cancel (–∫–Ω–æ–ø–∫–∞ "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")\n\t–æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤\n'

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/all", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"):
            new_state = ShowAll(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        if command in ("/letter", "üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º"):
            self.user_state.buffer.clear()
            new_state = WriteToFind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        word_count = len(self.user_state.dictionary.keys())
        if word_count == 0:
            new_state = NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_button('üîç –ù–∞–π—Ç–∏ –ø–æ –±—É–∫–≤–∞–º', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


class ShowAll(BotState):
    def start_text(self):
        word_count = self.user_state.buffer["word_count"]

        if "from_word_idx" in self.user_state.buffer.keys():
            from_idx = self.user_state.buffer["from_word_idx"]
        else:
            from_idx = 0
            self.user_state.buffer["from_word_idx"] = 0

        all_words, all_count = self.get_word_list(from_idx)

        if all_count == SHOW_COUNT and from_idx + SHOW_COUNT < word_count:
            text = f'–ï—â–µ —Å–ª–æ–≤: {word_count - from_idx - SHOW_COUNT}\n' \
                   f'–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ /more\n' \
                   f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑ —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ /cancel\n'
        else:
            text = "–≠—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞"
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return ''.join(all_words) + '\n\n' + text + "\n\n" + new_state.start_text()

        return ''.join(all_words) + '\n\n' + text

    def handle_answer(self, text):

        command = self.handle_commands(text)
        if command:
            return command

        new_state = ShowAll(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n\n" + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/more", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"):
            self.user_state.buffer["from_word_idx"] += SHOW_COUNT
            new_state = ShowAll(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        if "word_count" not in self.user_state.buffer:
            new_state = NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard

    def get_word_list(self, from_idx):
        all_words = ''
        count = 0
        word_ids = [int(id) for id in self.user_state.dictionary.keys()]
        words = Words.select(lambda x: x.id in word_ids).order_by(Words.word)[from_idx: from_idx + SHOW_COUNT]
        for word in words:
            count += 1
            transl_ids = [int(id) for id in self.user_state.dictionary[str(word.id)]]
            transls = [Words.get(id=int(id)).word for id in transl_ids]
            all_words += f"{word.word} - {', '.join(transls)}\n"
        return all_words, count


class WriteToFind(BotState):
    def start_text(self):
        return "–í–≤–µ–¥–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å–ª–æ–≤–∞\n" \
               "–í–≤–µ–¥–∏—Ç–µ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        fragment = text.strip()

        indices = [int(id) for id in self.user_state.dictionary.keys()]
        words_lambda = lambda x: x.id in indices and fragment in x.word
        words_selection = Words.select(words_lambda)
        selected_count = len(words_selection)

        if selected_count == 0:
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return "–ù–µ—Ç —Å–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö —Ç–∞–∫–æ–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç\n\n" + new_state.start_text(), new_state.get_keyboard()

        self.user_state.buffer.update({"fragment": fragment})
        self.user_state.buffer.update({"idx_from": 0})
        self.user_state.buffer.update({"found_count": selected_count})

        new_state = FindWords(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard


class FindWords(BotState):
    def start_text(self):
        idx_from = self.user_state.buffer["idx_from"]
        count = self.user_state.buffer["found_count"]

        all_words, all_count = self.get_word_list(idx_from)

        if all_count == SHOW_COUNT and idx_from + SHOW_COUNT < count:
            text = f'–ï—â–µ —Å–ª–æ–≤: {count - idx_from - SHOW_COUNT}\n' \
                   f'–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—â–µ, –≤–≤–µ–¥–∏—Ç–µ /more\n' \
                   f'–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫–∞–∑ —Å–ª–æ–≤, –≤–≤–µ–¥–∏—Ç–µ /cancel\n'
        else:
            text = "–≠—Ç–æ –≤—Å–µ —Å–ª–æ–≤–∞"
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return ''.join(all_words) + '\n\n' + text + "\n\n" + new_state.start_text()

        return ''.join(all_words) + '\n\n' + text

    def handle_answer(self, text):

        command = self.handle_commands(text)
        if command:
            return command

        new_state = FindWords(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ\n\n" + new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()

        if command in ("/cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return CANCEL_ALL_WORDS + '\n\n' + new_state.start_text(), new_state.get_keyboard()

        if command in ("/more", "üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"):
            self.user_state.buffer["idx_from"] += SHOW_COUNT
            new_state = FindWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text(), new_state.get_keyboard()

        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)

        if not self.user_state.buffer:
            new_state = NeutralState(self.user_state)
            return new_state.get_keyboard()

        keyboard.add_button('üìñ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ', color=VkKeyboardColor.SECONDARY)
        keyboard.add_line()
        keyboard.add_button('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', color=VkKeyboardColor.PRIMARY)
        return keyboard

    def get_word_list(self, idx_from):
        all_words = ''
        count = 0
        indices = [int(id) for id in self.user_state.dictionary.keys()]
        fragment = self.user_state.buffer["fragment"]
        words = Words.select(lambda x: x.id in indices and fragment in x.word).order_by(Words.word)[
                idx_from: idx_from + SHOW_COUNT]
        for word in words:
            count += 1
            transl_ids = [int(id) for id in self.user_state.dictionary[str(word.id)]]
            transls = [Words.get(id=int(id)).word for id in transl_ids]
            all_words += f"{word.word} - {', '.join(transls)}\n"
        return all_words, count


# Start test

class StartTest(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n" \
               f"–ú–∞–∫—Å–∏–º—É–º {len(self.user_state.dictionary.keys())}(—Å—Ç–æ–ª—å–∫–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤)\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç, –≤–≤–µ–¥–∏—Ç–µ /stop –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        try:
            count = int(text.strip())
        except ValueError:
            return "–í—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –≤–≤–µ–ª–∏. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n\n" + self.start_text()

        if count > len(self.user_state.dictionary.keys()):
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —É –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–ª–æ–≤\n\n" + self.start_text()

        test_list = sample(self.user_state.dictionary.keys(), k=count)
        self.user_state.buffer = dict(list=test_list,
                                      count=count,
                                      correct=0)

        new_state = Testing(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text(), new_state.get_keyboard()

    def handle_commands(self, text):
        command = text.strip()
        if command in ("/stop", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç"):
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return TEST_EXIT_INFO + '\n\n' + new_state.start_text(), new_state.get_keyboard()
        return False

    def get_keyboard(self):
        keyboard = VkKeyboard(one_time=True)
        keyboard.add_button('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç', color=VkKeyboardColor.NEGATIVE)

        return keyboard


class Testing(StartTest):
    def start_text(self):
        word_id = int(self.user_state.buffer['list'][0])
        word = Words.get(id=word_id).word
        return word

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word_id = self.user_state.buffer['list'][0]
        answer = text.strip()
        translation = Words.get(word=answer)
        transl_id = None
        if translation is not None:
            transl_id = str(translation.id)

        dictionary = self.user_state.dictionary
        if transl_id in dictionary[word_id]:
            text_to_send = "–í–µ—Ä–Ω–æ!\n\n"
            self.user_state.buffer['correct'] += 1
        else:
            transl_indices = [int(id) for id in dictionary[word_id]]
            translations = [Words.get(id=int(id)).word for id in transl_indices]
            text_to_send = f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n{Words.get(id=int(word_id)).word} - {", ".join(translations)}\n\n'

        self.user_state.buffer['list'].pop(0)

        if len(self.user_state.buffer['list']) == 0:
            correct = self.user_state.buffer['correct']
            count = self.user_state.buffer['count']
            self.user_state.buffer.clear()
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return text_to_send + \
                   "–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!\n" \
                   f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct}/{count}\n\n" \
                   + new_state.start_text(), new_state.get_keyboard()

        return text_to_send + self.start_text(), self.get_keyboard()


START_STATE = Greeting.__name__
