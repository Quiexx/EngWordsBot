from random import sample

from pony.orm import commit

from database_models import Words

HELP_INFO = "–Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
            "‚úç /new - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥" \
            "ü§î /remind - –í—Å–ø–æ–º–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.\n" \
            "üìî /all - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞.\n" \
            "‚ùå /delete - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n" \
            "üìù /test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç. –í–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞ —è –±—É–¥—É –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ—Ö, —á—Ç–æ –≤—ã " \
            "–¥–æ–±–∞–≤–∏–ª–∏, –ø–∏—Å–∞—Ç—å –µ–≥–æ —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, –∞ –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥.\n" \
            "–ù–∞–ø—Ä–∏–º–µ—Ä, —è –≤–∞–º - apple, –∞ –≤—ã –º–Ω–µ - —è–±–ª–æ–∫–æ.\n" \
            "‚èπ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç."

TEST_EXIT_INFO = "–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω"
EXISTING_TRANSLATION = "–¢–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É–∂–µ –µ—Å—Ç—å"
DELETION_TEXT = "–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ"
CANCEL_WORD_ADDING = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"


class BotState:
    def __init__(self, user_state):
        self.user_state = user_state

    def handle_commands(self, text, start_text=''):
        command = text.strip()

        if command == "/help":
            return HELP_INFO + '\n\n' + start_text

        if command == "/new":
            new_state = NewWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        if command == "/delete":
            new_state = DeleteWord(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        if command == "/remind":
            new_state = Remind(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        if command == "/all":
            new_state = CheckAllWords(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        if command == "/test":
            new_state = StartTest(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        if command == "/stop":
            if self.user_state.bot_state_name in (StartTest.__name__, Testing.__name__, AddAnotherTranslation.__name__):
                new_state = NeutralState(self.user_state)
                self.user_state.bot_state_name = new_state.__class__.__name__
                return TEST_EXIT_INFO + '\n\n' + new_state.start_text()

            return '–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—åüåö\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /test,' \
                   ' –∞ –ø–æ—Ç–æ–º –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /stop üòå' + start_text

        if command == "/cancel":
            if self.user_state.bot_state_name in (NewWord.__name__, AddAnotherTranslation.__name__):
                new_state = NeutralState(self.user_state)
                self.user_state.bot_state_name = new_state.__class__.__name__
                return CANCEL_WORD_ADDING + '\n\n' + new_state.start_text()

            return start_text

        return False

    def start_text(self):
        return "–≠—Ç–æ—Ç state –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤"

    def handle_answer(self, text):
        command = self.handle_commands(text, self.start_text())
        if command:
            return command

        return self.start_text()


# Neutral state

class NeutralState(BotState):
    def start_text(self):
        return "üòå –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        return self.start_text()


# Greeting state

class Greeting(NeutralState):
    def start_text(self):
        return "–ü—Ä–∏–≤–µ—Ç!!! üòÄüñê\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —è –∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ /help üòâ"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


# Add new word

class NewWord(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –Ω–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        written_word = text.strip()

        self.user_state.last_word = written_word

        new_state = NewWordTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


class NewWordTranslation(BotState):
    def start_text(self):
        return "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n" \
               "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /cancel"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word = self.user_state.last_word
        translation = text.strip()

        found_word = Words.get(word=word)
        found_translation = Words.get(word=translation)

        if found_word is None:
            found_word = Words(word=word, using_count=0)

        if found_translation is None:
            found_translation = Words(word=translation, using_count=0)
            commit()

        word_id = str(found_word.id)
        translation_id = str(found_translation.id)

        dictionary = self.user_state.dictionary

        # TODO: —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª-–≤–∞ —é–∑–µ—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏—Ö —Å–ª–æ–≤–æ

        if word_id in dictionary:
            self.user_state.dictionary[word_id].append(translation_id)
        else:
            self.user_state.dictionary[word_id] = [translation_id]

        if translation_id in dictionary:
            self.user_state.dictionary[translation_id].append(word_id)
        else:
            self.user_state.dictionary[translation_id] = [word_id]

        new_state = AddAnotherTranslation(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


class AddAnotherTranslation(BotState):
    def start_text(self):
        return "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞? (–¥–∞/–Ω–µ—Ç)"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        answer = text.strip().lower()
        if answer in ('–¥–∞', '—Ö–æ—á—É', '–¥–∞–≤–∞–π'):
            new_state = NewWordTranslation(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return new_state.start_text()

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


# Remind word's translation

class Remind(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        text_to_send = ""

        word = text.strip()

        found_word = Words.get(word=word)
        dictionary = self.user_state.dictionary
        word_id = str(found_word.id)
        if word_id not in dictionary:
            text_to_send = "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ.\n" \
                           "–ß—Ç–æ–±—ã –µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /new"
        else:
            transl_idices = [int(id) for id in dictionary[word_id]]
            translations = [Words.get(id=id).word for id in transl_idices]

            for i, translation in enumerate(translations, 1):
                text_to_send += f"{i}) {translation}\n"

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return text_to_send + '\n\n' + new_state.start_text()


# Delete word

class DeleteWord(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        written_word = text.strip()
        word = Words.get(word=written_word)
        word_id = str(word.id)
        if word_id not in self.user_state.dictionary:
            return "–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–æ. –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ " \
                   "–º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å /all\n\n" + self.start_text()

        transl_indices = self.user_state.dictionary[word_id]
        self.user_state.dictionary.pop(word_id)

        for transl_id in transl_indices:
            print(transl_id, type(transl_id))
            self.user_state.dictionary[transl_id].remove(word_id)
            if not self.user_state.dictionary[transl_id]:
                self.user_state.dictionary.pop(transl_id)

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return DELETION_TEXT + '\n' + new_state.start_text()


# Check all added words

class CheckAllWords(BotState):
    def start_text(self):
        all_words = ''
        for word_id, transl_indices in self.user_state.dictionary.items():
            word = Words.get(id=int(word_id)).word
            translations = [Words.get(id=int(id)).word for id in transl_indices]
            all_words += f"{word} - {', '.join(translations)}\n"
        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return all_words + '\n\n' + new_state.start_text()

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        new_state = NeutralState(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


# Start test

class StartTest(BotState):
    def start_text(self):
        return "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.\n" \
               f"–ú–∞–∫—Å–∏–º—É–º {len(self.user_state.dictionary.keys())}(—Å—Ç–æ–ª—å–∫–æ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–æ–≤)"

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        try:
            count = int(text.strip())
        except ValueError:
            return "–í—ã —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ –≤–≤–µ–ª–∏. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∏—Å–ª–æ\n\n" + self.start_text()

        if count > len(self.user_state.dictionary.keys()):
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, —É –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–ª–æ–≤\n\n" + self.start_text()

        test_list = sample(self.user_state.dictionary.keys(), k=count)
        self.user_state.test_list = dict(list=test_list,
                                         count=count,
                                         correct=0)

        new_state = Testing(self.user_state)
        self.user_state.bot_state_name = new_state.__class__.__name__
        return new_state.start_text()


class Testing(BotState):
    def start_text(self):
        word_id = int(self.user_state.test_list['list'][0])
        word = Words.get(id=word_id).word
        return word

    def handle_answer(self, text):
        command = self.handle_commands(text)
        if command:
            return command

        word_id = self.user_state.test_list['list'][0]
        answer = text.strip()
        translation = Words.get(word=answer)
        transl_id = None
        if translation is not None:
            transl_id = str(translation.id)

        dictionary = self.user_state.dictionary
        if transl_id in dictionary[word_id]:
            text_to_send = "–í–µ—Ä–Ω–æ!\n\n"
            self.user_state.test_list['correct'] += 1
        else:
            transl_indices = [int(id) for id in dictionary[word_id]]
            translations = [Words.get(id=int(id)).word for id in transl_indices]
            text_to_send = f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n\n{Words.get(id=int(word_id)).word} - {", ".join(translations)}\n\n'

        self.user_state.test_list['list'].pop(0)

        if len(self.user_state.test_list['list']) == 0:
            new_state = NeutralState(self.user_state)
            self.user_state.bot_state_name = new_state.__class__.__name__
            return text_to_send + \
                   "–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!\n" \
                   f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {self.user_state.test_list['correct']}/{self.user_state.test_list['count']}\n\n" \
                   + new_state.start_text()

        return text_to_send + self.start_text()


START_STATE = Greeting.__name__
